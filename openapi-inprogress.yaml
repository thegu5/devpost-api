openapi: '3.1.0'
info:
  version: 0.1.0
  title: Unofficial Devpost API
  description: In progress - nothing is hosted yet. Working on docs before the actual code
  license: 
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://devpost.gu5.org
security: []
paths:
  /software/{software}:
    get:
      summary: /software/{software}
      operationId: getSoftware
      description: This route won't automatically grab usernames of people who've liked the project or all of its updates - use the /software/{software}/likes and /software/{software}/updates routes for that.
      parameters:
        - $ref: "#/components/parameters/Software"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The software's name
                    minLength: 1
                    maxLength: 60
                  tagline:
                    type: string
                    description: A short description of the software
                    minLength: 1
                    maxLength: 200
                  description:
                    type: string
                    description: The software's description
                    minLength: 1
                  createdAt:
                    type: string
                    description: The software's creation date
                    format: date-time
                  slug:
                    type: string
                    description: The software's URI slug
                  members:
                    type: array
                    description: Array of software member objects
                    items:
                      allOf: 
                        -  $ref: "#/components/schemas/UserCard"
                        -  properties:
                            contributions:
                              type: string
                              description: The member's contributions to the software
                              maxLength: 140
                            bio:
                              type: [string, 'null']
                              description: The member's bio
                              maxLength: 140
                  tags:
                    type: array
                    description: Array of tag strings
                    items:
                      type: string
                      minLength: 1
                  links:
                    type: array
                    description: An array of link URLs
                    items: 
                      type: string
                      minLength: 1
                      maxLength: 255
                  hackathons:
                    type: array
                    description: Array of hackathon submissions
                    items:
                      allOf: 
                        -  $ref: "#/components/schemas/HackathonCard"
                        - properties: 
                            prizes:
                              type: [array, 'null']
                              description: Array of prizes
                              items:
                                type: string
                  video:
                    type: [string, 'null']
                    description: The software's video URL
                  carousel:
                    type: [array, 'null']
                    description: Array of carousel item data
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          description: The carousel image's URL
                        caption:
                          type: [string, 'null']
                          description: The carousel image's caption
                          maxLength: 140
                  # updates: TODO
                  stats:
                    type: object
                    description: Software statistics
                    properties:
                      likes:
                        type: integer
                        description: Number of likes
                        minimum: 0
                      comments:
                        type: integer
                        description: Number of comments
                        minimum: 0
                      updates:
                        type: integer
                        description: Number of updates
                        minimum: 0
        "404":
          $ref: "#/components/responses/NotFound"
  /software/{software}/likes:
    get:
      summary: /software/{software}/likes
      operationId: getSoftwareLikes
      description: Gets a list of users who've liked a software.
      parameters: 
        - $ref: "#/components/parameters/Software"
      responses:
        "200":
          description: Successful response
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserCard"
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{user}: 
    get:
      summary: /user/{user}
      operationId: getUser
      description: Gets information about a user. Follows software pagination, and can get software hidden from their profile.
      parameters:
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties: 
                  name:
                    type: string
                    description: The user's full name
                    minLength: 3
                    maxLength: 81
                  bio:
                    type: [string, 'null']
                    description: The user's bio
                    maxLength: 140
                  avatar:
                    type: string
                    description: A link to the user's avatar (can be a github/other platform cdn)
                  banner:
                    type: [string, 'null']
                    description: A link to the user's banner image (null if not set)
                  bannerColor:
                    type: [string]
                    description: The user's banner color (#000000 if using a banner image)
                    pattern: "^#[A-Fa-f0-9]{6}"
                    minLength: 7
                    maxLength: 7
                  external:
                    type: object
                    description: External links + user-specified location.
                    properties: 
                      location:
                        type: [string, 'null']
                        description: The user's location
                      website:
                        type: [string, 'null']
                        description: The user's website URL
                      github:
                        type: [string, 'null']
                        description: The user's GitHub profile URL
                      twitter:
                        type: [string, 'null']
                        description: The user's Twitter profile URL
                      linkedin:
                        type: [string, 'null']
                        description: The user's LinkedIn profile URL
                  skills:
                    type: [array, 'null']
                    description: Array of skills
                    items:
                      type: string
                      minimum: 1
                  interests:
                    type: [array, 'null']
                    description: Array of interests
                    items:
                      $ref: "#/components/schemas/HackathonTags"
                  stats:
                    type: object
                    description: User statistics for various categories
                    properties: 
                      projects:
                        type: integer
                        description: Number of projects
                        minimum: 0
                      hackathons:
                        type: integer
                        description: Number of hackathons
                        minimum: 0
                      achievements:
                        type: integer
                        description: Number of achievements
                        minimum: 0
                      followers:
                        type: integer
                        description: Number of followers
                        minimum: 0
                      following:
                        type: integer
                        description: Number of people the user is following
                        minimum: 0
                      likes:
                        type: integer
                        description: Number of projects the user has liked
                        minimum: 0
                  projects:
                      type: [array, 'null']
                      items:
                        allOf: 
                          - $ref: "#/components/schemas/ProjectCard"
                          - properties:
                              featured:
                                type: boolean
                                description: Whether the project is was featured by the user (yellow star on profile)
                  
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{user}/challenges:
    get: 
      summary: /user/{user}/challenges
      operationId: getUserHackathons
      description: Gets a list of hackathons a user has participated in and the project's status. Endpoint is 'challenges' to follow Devpost's urls.
      parameters: 
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema: 
                type: array
                items:
                  allOf: 
                    -  $ref: "#/components/schemas/HackathonCard"
                    -  properties: 
                        featured:
                          type: boolean
                          description: Whether the hackathon is featured
                        status:
                          type: [string, 'null']
                          description: The project's status
                          enum: 
                            - null # no project
                            - "Draft"
                            - "Submitted"
                            - "Winner"
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{user}/achievements:
    get: 
      summary: /user/{user}/achievements
      operationId: getUserAchievements
      description: Gets a list of achievements a user has earned.
      parameters: 
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Successful response
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  minProperties: 1
                  maxProperties: 10
                  properties: 
                    name:
                      type: string
                      description: The achievement's name
                    description:
                      type: string
                      description: The achievement's description
                    image:
                      type: string
                      description: The achievement's image URL
                    date:
                      type: string
                      description: The date the achievement was earned
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{user}/followers:
    get: 
      summary: /user/{user}/followers
      operationId: getUserFollowers
      description: Gets a list of users following a user. Contains advanced user card objects.
      parameters: 
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdvancedUserCard"
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{user}/following:
    get: 
      summary: /user/{user}/following
      operationId: getUserFollowing
      description: Gets a list of users a user is following. Contains advanced user card objects.
      parameters: 
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdvancedUserCard"
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{user}/likes:
    get: 
      summary: /user/{user}/likes
      operationId: getUserLikes
      description: Gets a list of projects a user has liked. Contains project card objects.
      parameters: 
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectCard"
        "404":
          $ref: "#/components/responses/NotFound"
  /hackathon/{hackathon}:
    get: 
      summary: /hackathon/{hackathon}
      operationId: getHackathon
      description: Gets information about a hackathon.
      parameters: 
        - $ref: "#/components/parameters/Hackathon"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  name:
                    type: string
                    description: The hackathon's official name
                  shortDescription:
                    type: string
                    description: The hackathon's short description
                  description:
                    type: string
                    description: The hackathon's (long) description
                  banner:
                    type: [string, 'null']
                    description: A link to the hackathon's banner image (null if not set)
                  bannerColor:
                    type: string
                    description: The hackathon's banner color (#000000 if using a banner image)
                    pattern: "^#[A-Fa-f0-9]{6}"
                    minLength: 7
                    maxLength: 7
                  time:
                    type: string
                    description: Range of time the hackathon takes place
                  location:
                    type: string
                    description: The hackathon's location
                  address:
                    type: [string, 'null']
                    description: The address of the hackathon's location (null if online)
                  availability:
                    type: string
                    description: The hackathon's availability
                    enum: 
                      - "Public"
                      - "Invite only"
                  prizeTotal:
                    type: integer
                    description: The hackathon's current available prize money
                  participantCount:
                    type: integer
                    description: The number of participants in the hackathon
                  tags:
                    type: [array, 'null']
                    description: Array of interest tags
                    items: 
                      $ref: "#/components/schemas/HackathonTags"
                  requirementText:
                    type: [string, 'null']
                    description: The hackathon's requirement text block
                  requirements:
                    type: [string, 'null']
                    description: The "who can participate" list
                    
                  prizes:
                    type: array
                    description: Array containing every prize for the hackathon
                    items:
                      type: object
                      description: Names of the prizes in the hackathon
                      properties:
                        name:
                          type: string
                          description: The name of the prize
                        description:
                          type: string
                          description: The description of the prize
                  judges:
                    type: array
                    description: Array containing every judge for the hackathon
                    items:
                      type: object
                      description: Names of the judges in the hackathon
                      minimum: 1
                      properties:
                        name:
                          type: string
                          description: The name of the judge
                        avatar:
                          type: string
                          description: The judge's avatar URL
                  judgingCriteria:
                    type: [string, 'null']
                    description: The hackathon's judging criteria text block
        "404":
          $ref: "#/components/responses/NotFound"
  /hackathon/{hackathon}/participants:
    get: 
      summary: /hackathon/{hackathon}/participants
      operationId: getHackathonParticipants
      description: Gets a list of participants in a hackathon. Contains extended user card objects.
      parameters: 
        - $ref: "#/components/parameters/Hackathon"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items: 
                  allOf: 
                    -  $ref: "#/components/schemas/UserCard"
                    - properties: 
                        stats:
                          type: object
                          description: The user's stats
                          properties: 
                            projects:
                              type: integer
                              description: The number of projects the user has created
                            followers:
                              type: integer
                              description: The number of users following the user
                            achievements:
                              type: integer
                              description: The number of achievements the user has earned
                        specialty:
                          type: [string, 'null']
                          description: The user's specialty
                        skills:
                          type: [array, 'null']
                          description: Array of skills the user has
                          items: 
                            type: string
                            description: A skill the user has
                        interests:
                          type: [array, 'null']
                          description: Array of interests the user has
                          items: 
                            $ref: "#/components/schemas/HackathonTags"
                        teamStatus:
                          type: [string, 'null']
                          description: The participants's team status
                          enum: 
                            - 'Has a team'
                            - 'Working solo'
                            - 'Looking for a team'
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          description: Server-side access token expired
          content: 
            application/json:
              schema: 
                type: object
                properties: 
                  error:
                    type: string
                    description: Error message
        "501":
          description: Server-side access token not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                              
                        
  /hackathon/{hackathon}/rules:
    get: 
      summary: /hackathon/{hackathon}/rules
      operationId: getHackathonRules
      description: Gets a markdown string containing the rules for a hackathon
      parameters: 
        - $ref: "#/components/parameters/Hackathon"
      responses: 
        "200":
          description: Successful response
          content: 
            application/json:
              schema: 
                type: object
                properties: 
                  rules:
                    type: string
                    description: The hackathon's rules
        "404":
          $ref: "#/components/responses/NotFound"
  /hackathon/{hackathon}/project-gallery:
    get: 
      summary: /hackathon/{hackathon}/project-gallery
      operationId: getHackathonProjectGallery
      description: Gets a list of projects in a hackathon's project gallery. Contains project card objects.
      parameters:
        - $ref: "#/components/parameters/Hackathon"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectCard"
        "404":
          $ref: "#/components/responses/NotFound"
  /hackathon/{hackathon}/updates:
    get: 
      summary: /hackathon/{hackathon}/updates
      operationId: getHackathonUpdates
      description: Gets an array of updates for a hackathon
      parameters: 
        - $ref: "#/components/parameters/Hackathon"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: 
                    time:
                      type: string
                      description: Relative time of the update
                    title:
                      type: string
                      description: The update's title
                    slug:
                      type: string
                      description: The update's URI slug
                    contentPreview:
                      type: string
                      description: Beginning of the update's content (full can be found at /hackathon/{hackathon}/updates/{update})
        "404":
          $ref: "#/components/responses/NotFound"
  /hackathon/{hackathon}/updates/{update}:
    get: 
      summary: /hackathon/{hackathon}/updates/{update}
      operationId: getHackathonUpdate
      description: Gets information about a hackathon update
      parameters: 
        - $ref: "#/components/parameters/Hackathon"
        - name: update
          in: path
          description: The update's URI slug
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content: 
            application/json:
              schema:
                type: object
                properties: 
                  time:
                    type: string
                    description: Relative time of the update
                  title:
                    type: string
                    description: The update's title
                  slug:
                    type: string
                    description: The update's URI slug
                  content:
                    type: string
                    description: The update's content
        "404":
          $ref: "#/components/responses/NotFound"
  # discussions
components:

  responses: 
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
  parameters:
    User:
      name: user
      in: path
      description: The user's username
      required: true
      schema:
        type: string
    Software:
      name: software
      in: path
      description: The software's URI slug
      required: true
      schema:
        type: string
    Hackathon:
      name: hackathon
      in: path
      description: The hackathon's URL slug
      required: true
      schema: 
        type: string
  schemas:
    HackathonTags:
      type: string
      description: Hackathon tags (interests)
      enum: 
        - "AR/VR"
        - "Communication"
        - "Design"
        - "Education"
        - "Gaming"
        - "Lifehacks"
        - "Mobile"
        - "Productivity"
        - "Social Good"
        - "Beginner Friendly"
        - "Cybersecurity"
        - "DevOps"
        - "Enterprise"
        - "Health"
        - "Low/No Code"
        - "Music/Art"
        - "Quantum"
        - "Voice skills"
        - "Blockchain"
        - "Databases"
        - "E-commerce/Retail"
        - "Fintech"
        - "IoT"
        - "Machine Learning/AI"
        - "Open Ended"
        - "Robotic Process Automation"
        - "Web"
    UserCard:
      type: object
      description: Short user information provided outside of the user's profile
      properties:
        name:
          type: string
          description: The member's name
        username:
          type: [string, 'null']
          description: The member's username
        url:
          type: [string, 'null']
          description: The member's profile URL
        avatar:
          type: string
          description: The member's avatar URL
    # define a schema that expands on th UserCard schema, but adds stats
    AdvancedUserCard:
      allOf:
        - $ref: "#/components/schemas/UserCard"
        - type: object
          properties:
            bannerColor:
              type: string
              description: The user card's banner color (hex code)
              pattern: "^#[A-Fa-f0-9]{6}"
              minimum: 7
              maximum: 7
            stats:
              type: object
              description: User statistics for various categories
              properties: 
                projects:
                  type: integer
                  description: Number of projects
                  minimum: 0
                hackathons:
                  type: integer
                  description: Number of hackathons
                  minimum: 0
                followers:
                  type: integer
                  description: Number of followers
                  minimum: 0
                achievements:
                  type: integer
                  description: Number of achievements
                  minimum: 0
                bio:
                  type: [string, 'null']
                  description: The user's bio
                  maxLength: 140
    HackathonCard:
      type: object
      description: Short hackathon information
      properties:
        name:
          type: string
          description: The hackathon's name
        slug:
          type: string
          description: The hackathon's URL slug (subdomain!)
        url:
          type: string
          description: The hackathon's URL
        thumbnail:
          type: string
          description: The hackathon's thumbnail URL
    ProjectCard:
      type: object
      properties: 
        name:
          type: string
          description: The project's name
        tagline:
          type: string
          description: The project's tagline
        photo:
          type: string
          description: The project's thumbnail URL
        slug:
          type: string
          description: The project's URL slug
        url:
          type: string
          description: The project's URL
        members:
          type: array
          items: 
            $ref: "#/components/schemas/UserCard"
        like_count:
          type: integer
          description: Number of likes
          minimum: 0
        comment_count:
          type: integer
          description: Number of comments
          minimum: 0
        winner:
          type: boolean
          description: Whether the project won a hackathon or not